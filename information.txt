# This file is for explain some of the keywords.

==========REGISTRY==========
RegOpenKey: Opens the specified registry key. 
Note: This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the RegOpenKeyEx function.
Header: winreg.h (include Windows.h)
Library: Advapi32.lib
DLL: Advapi32.lib
-----------------------
RegSetValue: Sets the data and type of a specified value under a registry key.
Header: winreg.h (include Windows.h)
Library: Advapi32.lib
DLL: Advapi32.lib
-----------------------
RegGetValue: Retrieves the type and data for the specified registry value.
Header: winreg.h (include Windows.h)
Library: Advapi32.lib
DLL: Advapi32.lib
-----------------------
RtlWriteRegistryValue: This function is used to write a value to the registry from kernel-mode code.
Header: wdm.h (include Wdm.h, Ntddk.h, Ntifs.h)
Library: NtosKrnl.lib
DLL: NtosKrnl.exe
-----------------------
RtlCreateRegistryKey: This function is used to create a registry from kernel-mode code.
Header: wdm.h (include Wdm.h, Ntddk.h, Ntifs.h)
Library: NtosKrnl.lib
DLL: NtosKrnl.exe

==========FILE==========
NtQueryDirectoryFile: The NtQueryDirectoryFile routine returns various kinds of information about files in the directory specified by a given file handle.
Header: ntifs.h (include Ntifs.h)
Library: NtosKrnl.lib
DLL: NtosKrnl.exe
-----------------------
CreateFileMapping: Creates or opens a named or unnamed file mapping object for a specified file.
Header: winbase.h (include Windows.h, Memoryapi.h)
Library: Kernel32.lib
DLL: Kernel32.dll
-----------------------
MapViewOfFile: Maps a view of a file mapping into the address space of a calling process. To specify a suggested base address for the view, use the MapViewOfFileEx function. However, this practice is not recommended.
Header: memoryapi.h (include Windows.h, Memoryapi.h)
Library: Kernel32.lib
DLL: Kernel32.dll
-----------------------
GetTempPath: Retrieves the path of the directory designated for temporary files.
Header: fileapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
-----------------------
SetFileTime: Sets the date and time that the specified file or directory was created, last accessed, or last modified.
Header: fileapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
-----------------------
SfcTerminateWatcherThread: This function is used to disable Windows file protection and modify files that otherwise would be protected
==========NETWORK==========
WSAStartup: This function initiates use of the Winsock DLL by a process.
Header: winsock.h (include Winsock2.h)
Library: Ws2_32.lib
DLL: Ws2_32.dll
-----------------------
WSAGetLastError: This function returns the error status for the last Windows Sockets operation that failed.
Header: winsock.h (include Winsock2.h)
Library: Ws2_32.lib
DLL: Ws2_32.dll

==========WEB==========
InternetOpen: Initializes an application's use of the WinINet functions.
Header: wininet.h
Library: Wininet.lib
DLL: Wininet.dll
-----------------------
InternetOpenURL: Opens a resource specified by a complete FTP or HTTP URL.
Header: wininet.h
Library: Wininet.lib
DLL: Wininet.dll
-----------------------
InternetConnect: Opens an File Transfer Protocol (FTP) or HTTP session for a given site.
Header: wininet.h
Library: Wininet.lib
DLL: Wininet.dll
-----------------------
InternetReadFile: Reads data from a handle opened by the InternetOpenUrl, FtpOpenFile, or HttpOpenRequest function.
Header: wininet.h
Library: Wininet.lib
DLL: Wininet.dll
-----------------------
InternetWriteFile: Writes data to an open Internet file.
Header: wininet.h
Library: Wininet.lib
DLL: Wininet.dll
-----------------------
HTTPOpenRequest: Creates an HTTP request handle.
Header: wininet.h
Library: Wininet.lib
DLL: Wininet.dll
-----------------------
HTTPSendRequest:Sends the specified request to the HTTP server, allowing callers to send extra data beyond what is normally passed to HttpSendRequestEx.
Header: wininet.h
Library: Wininet.lib
DLL: Wininet.dll
-----------------------
HTTPQueryInfo: Retrieves header information associated with an HTTP request.
Header: wininet.h
Library: Wininet.lib
DLL: Wininet.dll
-----------------------
URLDownloadToFile: Downloads bits from the Internet and saves them to a file.
Header: Urlmon.h
Library: Urlmon.lib
DLL: Urlmon.dll

==========Keyboard/Keylogger==========
SetWindowsHook: Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------
CallNextHook: Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------
MapVirtualKey: Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. To specify a handle to the keyboard layout to use for translating the specified code, use the MapVirtualKeyEx function.
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------
GetKeyState: Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, offâ€”alternating each time the key is pressed).
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------
GetAsyncKeyState: Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState.
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------
GetForegroundWindow: Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------
AttachThreadInput: Attaches or detaches the input processing mechanism of one thread to that of another thread.
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------
RegisterHotKey: This function is used to register a handler to be notified anytime a user enters a particular key combination (like CTRL-ALT-J), regardless of which window is active when the user presses the key combination. This function is sometimes used by spyware that remains hidden from the user until the key combination is pressed.
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------

----------------------

==========PROCESS==========
CreateProcess: Creates a new process and its primary thread. The new process runs in the security context of the calling process. If the calling process is impersonating another user, the new process uses the token for the calling process, not the impersonation token. To run the new process in the security context of the user represented by the impersonation token, use the CreateProcessAsUser or CreateProcessWithLogonW function.
Header: processthreadsapi.h (include Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2, Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
VirtualAlloc: Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process. Memory allocated by this function is automatically initialized to zero.
Header: memoryapi.h (include Windows.h, Memoryapi.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
VirtualProtect: Changes the protection on a region of committed pages in the virtual address space of the calling process.
Header: memoryapi.h (include Windows.h, Memoryapi.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
OpenProcess: Opens an existing local process object.
Header: processthreadsapi.h (include Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2, Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
EnumProcesses: Retrieves the process identifier for each process object in the system.
Header: psapi.h
Library: Kernel32.lib on Windows 7 and Windows Server 2008 R2; Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2; Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP
DLL: Kernel32.dll on Windows 7 and Windows Server 2008 R2; Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2; Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP
----------------------
EnumProcessModules: Retrieves a handle for each module in the specified process. To control whether a 64-bit application enumerates 32-bit modules, 64-bit modules, or both types of modules, use the EnumProcessModulesEx function.
Header: psapi.h
Library: Kernel32.lib on Windows 7 and Windows Server 2008 R2; Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2; Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP
DLL: Kernel32.dll on Windows 7 and Windows Server 2008 R2; Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2; Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP
----------------------
CreateRemoteThread: Creates a thread that runs in the virtual address space of another process. Use the CreateRemoteThreadEx function to create a thread that runs in the virtual address space of another process and optionally specify extended attributes.
Header: processthreadsapi.h (include Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2, Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
WriteProcessMemory: Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails.
Header: memoryapi.h (include Windows.h, Memoryapi.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
AdjustTokenPrivileges: The AdjustTokenPrivileges function enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token requires TOKEN_ADJUST_PRIVILEGES access.
Header: securitybaseapi.h (include Windows.h)
Library: Advapi32.lib
DLL: Advapi32.dll
----------------------
IsWow64Process: Determines whether the specified process is running under WOW64 or an Intel64 of x64 processor.
Header: wow64apiset.h (include Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2, Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
QueueUserAPC: Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread.
Header: processthreadsapi.h (include Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2, Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
NtQueryInformationProcess: Retrieves information about the specified process.
Header: winternl.h
DLL: Ntdll.dll

==========DLL==========
LoadLibrary: Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
Header: libloaderapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
GetProcAddress: Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
Header: libloaderapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
LdrLoadDll: This is a low-level function to load a DLL into a process, just like LoadLibrary. Normal programs use LoadLibrary, and the presence of this import may indicate a program that is attempting to be stealthy.
Library: ntdll.lib
DLL: ntdll.dll

==========Debugger Identifying==========
IsDebuggerPresent: Determines whether the calling process is being debugged by a user-mode debugger.
Header: debugapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
CheckRemoteDebuggerPresent: Determines whether the specified process is being debugged.
Header: debugapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
FindWindow: Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.
Header: winuser.h (include Windows.h)
Library: User32.lib
DLL: User32.dll
----------------------
GetTickCount: Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days.
Header: sysinfoapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
----------------------
NtQueryInformationProcess: Retrieves information about the specified process.
Header: winternl.h
DLL: Ntdll.dll
----------------------
OutputDebugString: Sends a string to the debugger for display.
Header: debugapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll

==========System Persistence==========
CreateService: Creates a service object and adds it to the specified service control manager database.
Header: winsvc.h (include Windows.h)
Library: Advapi32.lib
DLL: Advapi32.dll
----------------------
ControlService: Sends a control code to a service.
Header: winsvc.h (include Windows.h)
Library: AdvApi32.lib
DLL: AdvApi32.lib

==========COM Object==========
OleInitialize: Initializes the COM library on the current apartment, identifies the concurrency model as single-thread apartment (STA), and enables additional functionality described in the Remarks section below. Applications must initialize the COM library before they can call COM library functions other than CoGetMalloc and memory allocation functions.
Header: ole2.h
Library: Ole32.lib
DLL: Ole32.dll
----------------------
CoInitialize: Initializes the COM library on the current thread and identifies the concurrency model as single-thread apartment (STA).
Header: objbase.h
Library: Ole32.lib
DLL: Ole32.dll

==========Data Leakage==========
LsaEnumerateLogonSessions: This function retrieves the set of existing logon session identifiers (LUIDs) and the number of sessions.
Header: ntsecapi.h
Library: Secur32.lib
DLL: Secur32.dll
---------------------
SamIConnect: This function is used to connect to the Security Account Manager (SAM) in order to make future calls that access credential information. Hash-dumping programs access the SAM database in order to retrieve the hash of usersâ€™ login passwords.
---------------------
SamIGetPrivateData: This function is used to query the private information about a specific user from the Security Account Manager (SAM) database. Hash-dumping programs access the SAM database in order to retrieve the hash of usersâ€™ login passwords.
---------------------
SamQueryInformationUse: This function is used to query information about a specific user in the Security Account Manager (SAM) database. Hash-dumping programs access the SAM database in order to retrieve the hash of usersâ€™ login passwords.
---------------------
NetShareEnum: Retrieves information about each shared resource on a server. You can also use the WNetEnumResource function to retrieve resource information. However, WNetEnumResource does not enumerate hidden shares or users connected to a share.
Header: lmshare.h (include Lm.h)
Library: Netapi32.lib
DLL: Netapi32.dll
---------------------
ReadProcessMemory: This function is used to read the memory of a remote process.
Header: memoryapi.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
---------------------
Toolhelp32ReadProcessMemory: Copies memory allocated to another process into an application-supplied buffer.
Header: tlhelp32.h
Library: Kernel32.lib
DLL: Kernel32.dll

==========OTHER==========
CreateMutex: Creates or opens a named or unnamed mutex object.
Header: synchapi.h (include Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 Windows Server 2008 R2, Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
---------------------
ShellExecute: This function is used to execute another program.
---------------------
WinExec: Runs the specified application. Note  This function is provided only for compatibility with 16-bit Windows. Applications should use the CreateProcess function.
Header: winbase.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
---------------------
CryptAcquireContext: This function is used to acquire a handle to a particular key container within a particular cryptographic service provider (CSP). This returned handle is used in calls to CryptoAPI functions that use the selected CSP.
Header: wincrypt.h
Library: Advapi32.lib
DLL: Advapi32.dll
---------------------
EnableExecuteProtectionSupport: This function for preventing buffer overflow attacks. Also search -> DEP
---------------------
GetSystemDefaultLangId: Returns the language identifier of the Region Format setting for the current user.
Header: winnls.h (include Windows.h)
Library: Kernel32.lib
DLL: Kernel32.dll
---------------------
StartServiceCtrlDispatcher: Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process.
Header: winsvc.h (include Windows.h)
Library: Advapi32.lib
DLL: Advapi32.dll
---------------------
IsNTAdmin: Checks if the user has admin privileges. 
Header: advpub.h
---------------------
IsUserAnAdmin: Tests whether the current user is a member of the Administrator's group.
Header: shlobj_core.h (include Shlobj.h)
Library: Shell32.lib
DLL: Shell32.dll (version 5.0 or later)
